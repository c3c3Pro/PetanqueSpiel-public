(()=>{var e=L.map("map").setView([51.1657,10.4515],6);L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:"© OpenStreetMap contributors"}).addTo(e);var t=new Map;async function n(e,t){const n=`https://nominatim.openstreetmap.org/reverse?format=json&lat=${e}&lon=${t}`;try{const e=await fetch(n);if(!e.ok)throw new Error(`Server status ${e.status}`);const t=await e.json();return t.address&&"Germany"===t.address.country}catch(e){return console.warn("Der Bereich ist ausserhalb von Deutschland: ",e),!1}}async function o(o){if(!o||!o.coords||2!==o.coords.length)return console.error("Ungueltige Platzdaten: ",o),void alert("Fehler: ungueltige Platzdaten.");const r=o._id;if(t.has(r))return void console.log(`Marker with ID ${r} already exists. Skipping.`);if(!await n(o.coords[0],o.coords[1]))return void alert("Dieser Ort liegt ausserhalb von Deutschland");const i=document.createElement("div");i.innerHTML=`\n    <b>${o.platzName}</b><br>\n    Zugang: ${o.zugang}<br>\n    Typ: ${o.publicAccess}<br>\n    Feld: ${o.anzahlFelder}<br>\n    Notizen: ${o.notizen||"Keine"}\n  `;const c=document.createElement("span");c.className="menu-button",c.style.float="right",c.style.cursor="pointer",c.innerHTML="&#x22EE;",c.addEventListener("click",(e=>{e.stopPropagation(),a(o,r,e)})),i.appendChild(c);try{const n=L.marker(o.coords).addTo(e).bindPopup(i);return t.set(r,n),n.on("click",(()=>{n.openPopup()})),console.log("Popup content:",i.innerHTML),console.log("Marker created at:",o.coords),n}catch(e){return console.error("Error creating marker:",e),null}}function a(e,t,n){n.stopPropagation();const o=document.createElement("div");o.style.position="absolute",o.style.background="white",o.style.border="1px solid #ccc",o.style.padding="10px",o.style.borderRadius="6px",o.style.boxShadow="0 4px 6px rgba(0, 0, 0, 0.1)",o.style.zIndex="1000",o.style.left=`${n.pageX}px`,o.style.top=`${n.pageY}px`;const a=document.createElement("button");a.id=`edit-${t}`,a.textContent="Bearbeiten",a.className="btn edit-btn",a.style.marginRight="10px";const r=document.createElement("button");r.id=`delete-${t}`,r.textContent="Löschen",r.className="btn delete-btn",o.appendChild(a),o.appendChild(r),document.body.appendChild(o),document.getElementById(`edit-${t}`).addEventListener("click",(()=>{const t=new CustomEvent("editPlace",{detail:e});document.dispatchEvent(t),document.body.removeChild(o)})),document.getElementById(`delete-${t}`).addEventListener("click",(()=>{const e=new CustomEvent("deletePlace",{detail:t});document.dispatchEvent(e),document.body.removeChild(o)})),document.addEventListener("click",(e=>{o.contains(e.target)||document.body.removeChild(o)}),{once:!0})}function r(e){const t=document.getElementById("locationList");t&&(t.innerHTML="",e.forEach((e=>{const n=document.createElement("li");n.setAttribute("data-id",e._id),n.textContent=`${e.platzName} (${e.publicAccess}, ${e.zugang}) - ${e.anzahlFelder} Felder`,n.addEventListener("click",(()=>s(e))),t.appendChild(n)})))}async function i(){try{const e=await fetch("/api/places");if(!e.ok)throw new Error("Plaetze konnten nicht geladen werden");return await e.json()}catch(e){return console.error("Fehler beim Aufruf des Ortes",e.message),[]}}async function c(e){const{lat:t,lng:a}=e.latlng;if((await i()).some((e=>Math.abs(e.coords[0]-t)<1e-4&&Math.abs(e.coords[1]-a)<1e-4)))return void alert("Ein Platz existiert bereits an dieser Position! bitte neue Position auswaehlen");if(!await n(t,a))return void alert("Dieser Ort liegt außerhalb Deutschlands. Bitte eine deutsche Position auswählen!");const c=prompt("Den Namen eintragen:")?.trim();if(!c)return alert("Der Name darf nicht leer sein!");let s,l;do{s=prompt("Zugang eingeben (öffentlich oder privat):")?.trim().toLowerCase()}while(!["öffentlich","privat"].includes(s));do{l=prompt("Outdoor oder Indoor?:")?.trim().toLowerCase()}while(!["outdoor","indoor"].includes(l));const d=parseInt(prompt("Die Anzahl der Spielfelder eintragen:"),10);if(!Number.isInteger(d)||d<=0)return alert("Bitte eine gültige Anzahl eingeben!");const m={platzName:c,zugang:s,publicAccess:l,anzahlFelder:d,coords:[t,a],notizen:""};try{const e=await fetch("/api/places",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(m)});if(!e.ok)throw new Error("Plätze konnten nicht gespeichert werden");const t=await e.json();await o(t),console.log("Platz erfolgreich gespeichert");r(await i())}catch(e){console.log("Fehler beim Speichern des Platzes:",e.message)}}async function s(e){const n=prompt("Neuer Name:",e.platzName)?.trim()||e.platzName;let o,c;do{o=prompt("Zugang (öffentlich oder privat):",e.zugang)?.trim().toLowerCase()}while(!["öffentlich","privat"].includes(o));do{c=prompt("Outdoor oder Indoor?:",e.publicAccess)?.trim().toLowerCase()}while(!["outdoor","indoor"].includes(c));const s=parseInt(prompt("Anzahl der Spielfelder:",e.anzahlFelder),10);if(!Number.isInteger(s)||s<=0)return alert("Bitte eine gültige Anzahl eingeben!");const l=prompt("Notizen (optional):",e.notizen)||"",d={...e,platzName:n,zugang:o,publicAccess:c,anzahlFelder:s,notizen:l};try{if(!(await fetch(`/api/places/${e._id}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(d)})).ok)throw new Error("Platz konnte nicht aktualisiert werden");!function(e){const n=e._id,o=t.get(n);if(o){const t=document.createElement("div");t.innerHTML=`\n      <b>${e.platzName}</b><br>\n      Zugang: ${e.zugang}<br>\n      Typ: ${e.publicAccess}<br>\n      Feld: ${e.anzahlFelder}<br>\n      Notizen: ${e.notizen||"Keine"}\n    `;const r=document.createElement("span");r.className="menu-button",r.style.float="right",r.style.cursor="pointer",r.innerHTML="&#x22EE;",r.addEventListener("click",(t=>{t.stopPropagation(),a(e,n,t)})),t.appendChild(r),o.setPopupContent(t)}else console.warn("Marker not found for key:",n)}(d),alert("Platz erfolgreich aktualisiert!");r(await i())}catch(e){console.error("Fehler beim Aktualisieren des Platzes:",e.message)}}async function l(n){if(confirm("Sind Sie sicher, dass Sie diesen Platz löschen möchten?"))try{const o=await fetch(`/api/places/${n}`,{method:"DELETE",headers:{"Content-Type":"application/json"}});if(!o.ok)throw console.error("Server response:",o.status,o.statusText),new Error("Fehler beim Löschen des Platzes");!function(n){if(t.has(n)){const o=t.get(n);o&&e.removeLayer(o),t.delete(n)}else console.warn("Kein Marker gefunden für diesen Key:",n)}(n),document.querySelector(`#locationList li[data-id="${n}"]`)?.remove(),alert("Platz erfolgreich gelöscht!")}catch(e){console.error("Fehler beim Löschen des Platzes:",e.message),alert("Fehler beim Löschen: "+e.message)}}document.addEventListener("editPlace",(e=>{s(e.detail)})),document.addEventListener("deletePlace",(e=>{l(e.detail)})),e.on("click",c),async function(){if(e){e.off("click",c);try{document.getElementById("loadingIndicator")?.classList.remove("hidden");const n=await i();t.forEach(((t,n)=>{e.removeLayer(t)})),t.clear();for(const e of n)try{await o(e)?console.log("✅ Marker added successfully for:",e.platzName):console.error("❌ Failed to add marker for:",e.platzName)}catch(t){console.error("Error adding marker for place:",e,t)}r(n)}catch(e){console.error("Fehler beim Laden der Orte:",e.message)}finally{e.on("click",c),document.getElementById("loadingIndicator")?.classList.add("hidden")}}else console.error("Map object is not initialized")}();var d=1;function m(e){alert(e),console.error(e)}var u=null;function h(e){try{return new Date(e).toLocaleDateString("de-DE")}catch(t){return e||"Kein Datum"}}async function p(e=1,t=5){try{const n=await fetch(`/api/games?page=${e}&limit=${t}`);if(!n.ok)throw new Error("Fehler beim Laden der Partien");const o=await n.json();return console.log("🎯 FetchGames - Geladene Daten:",o),o.map((e=>({...e,matchDate:e.matchDate||"Kein Datum",matchTime:e.matchTime||"Keine Zeit",players:e.players||[],score:e.score||[0,0],completed:e.score.some((e=>13===e))})))}catch(e){return m("Die Partien konnten nicht geladen werden: "+e.message),[]}}function g(e){const t=document.getElementById("completed-games").querySelector("ul"),n=document.getElementById("matchTableBody");if(t&&n&&(e.completed||e.score.some((e=>13===e)))){const n=document.createElement("li");n.dataset.id=e._id;const o=h(e.matchDate),a=e.matchTime||"Keine Zeit";n.textContent=`${o} ${a} ${e.players.join(", ")} ${e.score.join(":")}`,t.appendChild(n);const r=document.querySelector(`tr[data-id="${e._id}"]`);r&&r.remove()}}async function y(){const e=document.getElementById("matchTableBody"),t=document.getElementById("completed-games").querySelector("ul"),n=document.getElementById("pageInfo");if(e&&t&&n){console.log("displayMatchHistory() wird aufgerufen!");try{const o=await p();if(console.log("Geladene Spiele:",o),e.innerHTML="",t.innerHTML="",0===o.length)return void(e.innerHTML='<tr><td colspan="5">Keine Spiele gefunden.</td></tr>');const a=Math.ceil(o.length/5),r=5*(d-1),i=r+5,c=o.slice(r,i);n.textContent=`Seite ${d} von ${a}`,c.forEach((n=>{if(n._id&&(e.appendChild(function(e){const t=document.createElement("tr");t.setAttribute("data-id",e._id);const n=h(e.matchDate),o=e.matchTime||"Keine Zeit";return t.innerHTML=`\n    <td>${n}</td>\n    <td>${o}</td>\n    <td>${e.players.join(", ")}</td>\n    <td>${e.score.join(":")}</td>\n    <td>\n      <button class="edit-btn" data-id="${e._id}">Bearbeiten</button>\n      <button class="delete-btn" data-id="${e._id}">Löschen</button>\n    </td>\n  `,t}(n)),n.completed||n.score.some((e=>13===e)))){const e=document.createElement("li");e.dataset.id=n._id;const o=h(n.matchDate),a=n.matchTime||"Keine Zeit";e.textContent=`${o} ${a} ${n.players.join(", ")} ${n.score.join(":")}`,t.appendChild(e)}}))}catch(e){m("Fehler beim Laden der Match History: "+e.message)}}else console.error("matchTableBody, completedGamesList, oder pageInfo nicht gefunden!")}document.getElementById("matchTableBody")?.addEventListener("click",(async e=>{const t=e.target;if(!t.classList.contains("edit-btn")&&!t.classList.contains("delete-btn"))return;const n=t.dataset.id;n&&(t.classList.contains("edit-btn")?await async function(e){console.log("🔍 Bearbeiten gestartet für Spiel-ID:",e);try{const t=await fetch(`/api/games/${e}`);if(!t.ok)throw new Error("Spiel nicht gefunden");const n=await t.json();let o;console.log("📥 Geladene Spieldaten:",n);try{o=new Date(n.matchDate).toISOString().split("T")[0]}catch(e){o=n.matchDate}document.getElementById("matchDate").value=o,document.getElementById("matchTime").value=n.matchTime||"",document.getElementById("players").value=n.players.join(", "),document.getElementById("score").value=n.score.join(":"),u=e,console.log(`✏️ Jetzt wird Spiel ${u} bearbeitet`),document.querySelector('#matchForm button[type="submit"]').textContent="Änderungen speichern";const a=document.getElementById("matchForm");a&&a.scrollIntoView({behavior:"smooth",block:"start"})}catch(e){m("❌ Fehler beim Bearbeiten des Spiels: "+e.message)}}(n):t.classList.contains("delete-btn")&&await async function(e){if(!confirm("Sind Sie sicher, dass Sie dieses Spiel löschen möchten?"))return;try{if(!(await fetch(`/api/games/${e}`,{method:"DELETE"})).ok)throw new Error("Fehler beim Löschen der Partie");document.querySelector(`tr[data-id="${e}"]`)?.remove(),document.querySelector(`li[data-id="${e}"]`)?.remove(),m("✅ Spiel erfolgreich gelöscht!")}catch(e){m("❌ Fehler beim Löschen des Spiels: "+e.message)}}(n))})),document.getElementById("matchForm")?.addEventListener("submit",(async e=>{e.preventDefault();const t=document.getElementById("matchDate").value,n=document.getElementById("matchTime").value,o=document.getElementById("players").value,a=document.getElementById("score").value,r=o.split(",").map((e=>e.trim())).filter((e=>e));if(2!==r.length)return m("❌ Bitte geben Sie genau zwei Spielernamen ein, getrennt durch ein Komma.");const i=a.split(":").map((e=>Number(e.trim())));if(2!==i.length||i.some((e=>Number.isNaN(e)||e<0||e>13)))return m('❌ Das Score-Feld muss im Format "Zahl:Zahl" sein (zwischen 0 und 13).');const c={matchDate:t,matchTime:n,players:r,score:i,completed:i.some((e=>13===e))};u?(await async function(e,t){try{const n=await fetch(`/api/games/${e}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!n.ok)throw new Error("Fehler beim Aktualisieren der Partie");const o=await n.json();return g(o),m("✅ Spiel erfolgreich aktualisiert!"),o}catch(e){m("❌ Fehler beim Aktualisieren des Spiels: "+e.message)}}(u,c),u=null,document.querySelector('#matchForm button[type="submit"]').textContent="Spiel hinzufugen"):await async function(e){e.completed=e.score.some((e=>13===e));try{const t=await fetch("/api/games/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw new Error("Fehler beim Speichern der Partie");const n=await t.json();return g(n),m("✅ Spiel erfolgreich hinzugefügt!"),n}catch(e){m("❌ Fehler beim Hinzufügen des Spiels: "+e.message)}}(c),document.getElementById("matchForm").reset()})),document.getElementById("prevPage")?.addEventListener("click",(()=>{d>1&&(d--,y())})),document.getElementById("nextPage")?.addEventListener("click",(async()=>{const e=await p(),t=Math.ceil(e.length/5);d<t&&(d++,y())})),document.addEventListener("DOMContentLoaded",(()=>{window.matchHistoryLoaded||(window.matchHistoryLoaded=!0,y())})),document.addEventListener("DOMContentLoaded",(()=>{!async function(){try{r(await i()),await y()}catch(e){console.error("Fehler beim Laden der Daten: ",e)}}()}))})();